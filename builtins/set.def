This file is set.def, from which is created set.c.
It implements the ‘set’, ‘shopt’, and ‘unset’ builtins in Bash.

Copyright (C) 1987-2024 Free Software Foundation, Inc.

This file is part of GNU Bash, the Bourne Again SHell.

Bash is free software: you can redistribute it and/or modify
it under the terms of the GNU General Public License as published by
the Free Software Foundation, either version 3 of the License, or
(at your option) any later version.

Bash is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
GNU General Public License for more details.

You should have received a copy of the GNU General Public License
along with Bash.  If not, see <http://www.gnu.org/licenses/>.

$PRODUCES set.c

#include <config.h>

#if defined (HAVE_UNISTD_H)
#  ifdef _MINIX
#    include <sys/types.h>
#  endif
#  include <unistd.h>
#endif

#include <stdio.h>

#include "version.h"

#include "../bashansi.h"
#include "../bashintl.h"

#include "../shell.h"
#include "../parser.h"
#include "../flags.h"
#include "common.h"
#include "bashgetopt.h"

#if defined (READLINE)
#  include "../input.h"
#  include "../bashline.h"
#  include <readline/readline.h>
#endif

#if defined (HISTORY)
#  include "../bashhist.h"
#endif

typedef int option_value_t;

#define OPTION_INVALID_VALUE ((option_value_t)-1)

typedef enum optset_status_e {
  OptSet_OK        = EXECUTION_SUCCESS,
  OptSet_Unchanged = EXECUTION_SUCCESS,
  OptSet_Ignored   = EXECUTION_SUCCESS,
  OptSet_NotFound  = EX_BADUSAGE,
  OptSet_ReadOnly  = EX_BADUSAGE,
  OptSet_BadValue  = EX_BADASSIGN,
  OptSet_Forbidden = EX_BADASSIGN,
} optset_status_t;

typedef enum access_mode_e {
  AccessMode_Shopt = false,
  AccessMode_Set = true,
} access_mode_t;

struct option_def_s;  /* forward ref */

typedef optset_status_t opt_set_func_t (struct option_def_s const *option_def,
					access_mode_t set_vs_shopt,
					option_value_t new_value);
typedef option_value_t opt_get_func_t (struct option_def_s const *option_def,
				       access_mode_t set_vs_shopt);

struct option_def_s {
  char *name;
  option_value_t *store;
  opt_set_func_t *set_func;
  opt_get_func_t *get_func;
  int   reference_value;
  char  letter;
  _Bool hide_set_o:1,
	hide_shopt:1,
	skip_bashopts:1,
	readonly:1,		/* silently ignore attempts to change the value */
	forbid_change:1;	/* throw an error if attempting to change the value */
};

$BUILTIN set
$FUNCTION set_builtin
$SHORT_DOC set [-abefhkmnptuvxBCEHPT] [-o option-name] [--] [-] [arg ...]
Set or unset values of shell options and positional parameters.

Change the value of shell attributes and positional parameters, or
display the names and values of shell variables.

Options:
  -a  Mark for export variables which are subsequently modified or created.
  -b  Notify of job termination immediately.
  -e  Exit immediately if a command exits with a non-zero status.
  -f  Disable file name generation (globbing).
  -h  Remember the location of commands as they are looked up.
  -k  All assignment arguments are placed in the environment for a
      command, not just those that precede the command name.
  -m  Job control is enabled.
  -n  Read commands but do not execute them.
  -o option-name
      Same as shopt -s option-name
  +o option-name
      Same as shopt -u option-name
      Set the variable corresponding to option-name:
          allexport    same as -a
          braceexpand  same as -B
#if defined (READLINE)
          emacs        use an emacs-style line editing interface
#endif /* READLINE */
          errexit      same as -e
          errtrace     same as -E
          functrace    same as -T
          hashall      same as -h
#if defined (BANG_HISTORY)
          histexpand   same as -H
#endif /* BANG_HISTORY */
#if defined (HISTORY)
          history      enable command history
#endif
          ignoreeof    the shell will not exit upon reading EOF
          interactive-comments
                       allow comments to appear in interactive commands
          keyword      same as -k
#if defined (JOB_CONTROL)
          monitor      same as -m
#endif
          noclobber    same as -C
          noexec       same as -n
          noglob       same as -f
          nolog        currently accepted but ignored
#if defined (JOB_CONTROL)
          notify       same as -b
#endif
          nounset      same as -u
          onecmd       same as -t
          physical     same as -P
          pipefail     the return value of a pipeline is the status of
                       the last command to exit with a non-zero status,
                       or zero if no command exited with a non-zero status
          posix        change the behavior of bash where the default
                       operation differs from the Posix standard to
                       match the standard
          privileged   same as -p
          verbose      same as -v
#if defined (READLINE)
          vi           use a vi-style line editing interface
#endif /* READLINE */
          xtrace       same as -x
  -p  Turned on whenever the real and effective user ids do not match.
      Disables processing of the $ENV file and importing of shell
      functions.  Turning this option off causes the effective uid and
      gid to be set to the real uid and gid.
  -t  Exit after reading and executing one command.
  -u  Treat unset variables as an error when substituting.
  -v  Print shell input lines as they are read.
  -x  Print commands and their arguments as they are executed.
#if defined (BRACE_EXPANSION)
  -B  the shell will perform brace expansion
#endif /* BRACE_EXPANSION */
  -C  If set, disallow existing regular files to be overwritten
      by redirection of output.
  -E  If set, the ERR trap is inherited by shell functions.
#if defined (BANG_HISTORY)
  -H  Enable ! style history substitution.  This flag is on
      by default when the shell is interactive.
#endif /* BANG_HISTORY */
  -P  If set, do not resolve symbolic links when executing commands
      such as cd which change the current directory.
  -T  If set, the DEBUG and RETURN traps are inherited by shell functions.
  --  Assign any remaining arguments to the positional parameters.
      If there are no remaining arguments, the positional parameters
      are unset.
  -   Assign any remaining arguments to the positional parameters.
      The -x and -v options are turned off.

If -o is supplied with no option-name, set prints the current shell
option settings. If +o is supplied with no option-name, set prints a
series of set commands to recreate the current option settings.

Using + rather than - causes these flags to be turned off (so that
‘set +o optionname’ is equivalent to ‘shopt -u optionname’).  The
flags can also be used upon invocation of the shell.  The current
set of flags may be found in $-.  The remaining n ARGs are positional
parameters and are assigned, in order, to $1, $2, .. $n.  If no
ARGs are given, all shell variables are printed.

Exit Status:
Returns success unless an invalid option is given.
$END

static opt_set_func_t set_ignoreeof;
static opt_set_func_t set_posix_mode;

#if defined (READLINE)
static opt_set_func_t set_edit_mode;
static opt_get_func_t get_edit_mode;
#endif

#if defined (HISTORY)
static opt_set_func_t bash_set_history;
#endif

static const char * const on = "on";
static const char * const off = "off";

static int previous_option_value;

#if 0
extern int
    mark_modified_vars,
#if defined (JOB_CONTROL)
    asynchronous_notification,
#endif /* JOB_CONTROL */
    errexit_flag,
    disallow_filename_globbing,
    hashing_enabled,
    forced_interactive,
    place_keywords_in_env,
#if defined (JOB_CONTROL)
    jobs_m_flag,
#endif /* JOB_CONTROL */
    read_but_dont_execute,
    privileged_mode,
#if defined (RESTRICTED_SHELL)
    restricted,
#endif /* RESTRICTED_SHELL */
    just_one_command,
    unbound_vars_is_error,
    verbose_flag,
    echo_command_at_execute,	/* New flags that control non-standard things. */
#if 0
    lexical_scoping,
#endif
#if defined (BRACE_EXPANSION)
    brace_expansion,
#endif
    noclobber,
    error_trace_mode,
#if defined (BANG_HISTORY)
    histexp_flag,
#endif /* BANG_HISTORY */
    no_symbolic_links,
    function_trace_mode;
#endif

/* A struct used to match long options for set -o to the corresponding
   option letter or internal variable.  The functions can be called to
   dynamically generate values.  If you add a new variable name here
   that doesn't have a corresponding single-character option letter, make
   sure to set the value appropriately in reset_shell_options. */
static const struct option_def_s o_options[] = {
  { "allexport",			.letter = 'a',	.hide_shopt = 1,	.store = &mark_modified_vars },
#if defined (BRACE_EXPANSION)
  { "braceexpand",			.letter = 'B',	.hide_shopt = 1,	.store = &brace_expansion },
#endif
#if defined (READLINE)
  { "emacs",						.hide_shopt = 1,	.set_func = set_edit_mode,	.get_func = get_edit_mode,	.reference_value = 1 },
#endif
  { "errexit",				.letter = 'e',	.hide_shopt = 1,	.store = &errexit_flag },
  { "errtrace",				.letter = 'E',	.hide_shopt = 1,	.store = &error_trace_mode },
  { "force-interactive",		.letter = 'i',	.hide_shopt = 1,	.hide_set_o = 1,	.store = &forced_interactive,	.forbid_change = 1 },
  { "functrace",			.letter = 'T',	.hide_shopt = 1,	.store = &function_trace_mode },
  { "hashall",				.letter = 'h',	.hide_shopt = 1,	.store = &hashing_enabled },
#if defined (BANG_HISTORY)
  { "histexpand",			.letter = 'H',	.hide_shopt = 1,	.store = &histexp_flag },
#endif /* BANG_HISTORY */
#if defined (HISTORY)
  { "history",						.hide_shopt = 1,	.store = &enable_history_list,	.set_func = bash_set_history },
#endif
  { "ignoreeof",					.hide_shopt = 1,	.store = &ignoreeof,	.set_func = set_ignoreeof },
  { "interactive-comments",				.hide_shopt = 1,	.store = &interactive_comments },
  { "keyword",				.letter = 'k',	.hide_shopt = 1,	.store = &place_keywords_in_env },
#if defined (JOB_CONTROL)
  { "monitor",				.letter = 'm',	.hide_shopt = 1,	.store = &jobs_m_flag },
#endif
  { "noclobber",			.letter = 'C',	.hide_shopt = 1,	.store = &noclobber },
  { "noexec",				.letter = 'n',	.hide_shopt = 1,	.store = &read_but_dont_execute },
  { "noglob",				.letter = 'f',	.hide_shopt = 1,	.store = &disallow_filename_globbing },
#if defined (HISTORY)
  { "nolog",						.hide_shopt = 1,	.store = &dont_save_function_defs },
#endif
#if defined (JOB_CONTROL)
  { "notify",				.letter = 'b',	.hide_shopt = 1,	.store = &asynchronous_notification },
#endif /* JOB_CONTROL */
  { "nounset",				.letter = 'u',	.hide_shopt = 1,	.store = &unbound_vars_is_error },
  { "onecmd",				.letter = 't',	.hide_shopt = 1,	.store = &just_one_command },
  { "physical",				.letter = 'P',	.hide_shopt = 1,	.store = &no_symbolic_links },
  { "pipefail",						.hide_shopt = 1,	.store = &pipefail_opt },
  { "posix",						.hide_shopt = 1,	.store = &posixly_correct,	.set_func = set_posix_mode },
  { "privileged",			.letter = 'p',	.hide_shopt = 1,	.store = &privileged_mode },
#if defined (RESTRICTED_SHELL)
  { "restricted",			.letter = 'r',	.hide_shopt = 1,	.hide_set_o = 1,	.store = &restricted,	.forbid_change = 1 },
#endif /* RESTRICTED_SHELL */
  { "verbose",				.letter = 'v',	.hide_shopt = 1,	.store = &verbose_flag },
#if defined (READLINE)
  { "vi",						.hide_shopt = 1,	.set_func = set_edit_mode,	.get_func = get_edit_mode,	.reference_value = 0 },
#endif
  { "xtrace",				.letter = 'x',	.hide_shopt = 1,	.store = &echo_command_at_execute },
  {0}
};

#define N_O_OPTIONS	(sizeof (o_options) / sizeof (o_options[0]))

static inline int
get_option_value(struct option_def_s const *d, access_mode_t set_vs_shopt) {
  if (!d)
    return -1;
  if (d->get_func)
    return d->get_func(d, set_vs_shopt);
  if (d->store)
    return *d->store;
  return -1;
}

static inline optset_status_t
set_option_value(struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t new_value) {
  if (!d)
    return EX_NOTFOUND;
  if (d->set_func)
    return d->set_func(d, set_vs_shopt, new_value);
  if (d->readonly)
    return OptSet_ReadOnly;
  if (d->forbid_change && get_option_value(d, set_vs_shopt) != new_value)
    return OptSet_ReadOnly;
  if (d->store)
    *d->store = new_value;
  return EXECUTION_SUCCESS;
}

/* This is a clone of find_shopt */
static struct option_def_s const *
find_option (char const *name)
{
  struct option_def_s const *d;

  for (d = o_options; d->name; d++)
    if (STREQ (name, d->name))
      return d;
  return NULL;
}

int
minus_o_option_value (char *name)
{
  register int	i;

  struct option_def_s const *d = find_option (name);
  if (!d)
    return -1;

  return get_option_value (d, AccessMode_Set);
}

#define MINUS_O_FORMAT "%-15s\t%s\n"

static void
print_minus_o_option (char *name, int value, int pflag)
{
  if (pflag == 0)
    printf (MINUS_O_FORMAT, name, value ? on : off);
  else
    printf ("set %co %s\n", bool_to_flag(value), name);
}

void
list_minus_o_opts (option_value_t mode, int reusable)
{
  struct option_def_s const *d;
  for (d = o_options; d->name; d++)
    {
      option_value_t value = get_option_value (d, AccessMode_Set);
      if (mode == OPTION_INVALID_VALUE || mode == value)
	print_minus_o_option (d->name, value, reusable);
    }
}

char **
get_minus_o_opts (void)
{
  char **ret;
  int i;

  ret = strvec_create (N_O_OPTIONS + 1);
  for (i = 0; o_options[i].name; i++)
    ret[i] = o_options[i].name;
  ret[i] = (char *)NULL;
  return ret;
}

char *
get_current_options (void)
{
  char *temp;
  size_t i, num_posixopts;

  num_posixopts = num_posix_options ();	/* shopts modified by posix mode */
  /* Make the buffer big enough to hold the set -o options and the shopt
     options modified by posix mode. */
  temp = (char *)xmalloc (1 + N_O_OPTIONS + num_posixopts);
  for (i = 0; o_options[i].name; i++)
    {
      struct option_def_s const *d = &o_options[i];
      temp[i] = bool_to_flag (get_option_value (d, AccessMode_Set));
    }

  /* Add the shell options that are modified by posix mode to the end of the
     bitmap. They will be handled in set_current_options() */
  get_posix_options (temp+i);
  temp[i+num_posixopts] = '\0';
  return (temp);
}

void
set_current_options (const char *bitmap)
{
  if (bitmap == 0)
    return;

  struct option_def_s const *d;

  for (d = o_options; d->name; d++)
    {
      option_value_t new_value = bitmap[d-o_options];
      option_value_t curr_value = get_option_value (d, AccessMode_Set);
      if (new_value != curr_value)
	set_option_value (d, AccessMode_Set, new_value);	/* ignore error status */
    }

  /* Now reset the variables changed by posix mode */
  set_posix_options (bitmap+(d-o_options));
}

static optset_status_t
set_ignoreeof (struct option_def_s const *option_def, access_mode_t set_vs_shopt, option_value_t mode)
{
  ignoreeof = mode;
  unbind_variable_noref ("ignoreeof");
  if (ignoreeof)
    bind_variable ("IGNOREEOF", "10", 0);
  else
    unbind_variable_noref ("IGNOREEOF");
  sv_ignoreeof ("IGNOREEOF");
  return 0;
}

static optset_status_t
set_posix_mode (struct option_def_s const *option_def, access_mode_t set_vs_shopt, option_value_t mode)
{
  /* short-circuit on no-op */
  if (!mode == !posixly_correct)
    return 0;

  posixly_correct = mode;
  if (posixly_correct == 0)
    unbind_variable_noref ("POSIXLY_CORRECT");
  else
    bind_variable ("POSIXLY_CORRECT", "y", 0);
  sv_strict_posix ("POSIXLY_CORRECT");
  return (0);
}

#if defined (READLINE)
/* Magic.  This code "knows" how readline handles rl_editing_mode. */
static optset_status_t
set_edit_mode (struct option_def_s const *option_def, access_mode_t set_vs_shopt, option_value_t mode)
{
  char *option_name = option_def->name;

  if (mode)
    {
      rl_variable_bind ("editing-mode", option_name);

      if (interactive && command_execution_string == 0)
	with_input_from_stdin ();
      no_line_editing = 0;
    }
  else
    {
      if ((rl_editing_mode == 1) == option_def->reference_value)
	{
	  if (interactive && command_execution_string == 0)
	    with_input_from_stream (stdin, "stdin");
	  no_line_editing = 1;
	}
    }
  return 1-no_line_editing;
}

static int
get_edit_mode (struct option_def_s const *option_def, access_mode_t set_vs_shopt)
{
  return no_line_editing == 0 && rl_editing_mode == option_def->reference_value;
}
#endif /* READLINE */

#if defined (HISTORY)
static optset_status_t
bash_set_history (struct option_def_s const *option_def, access_mode_t set_vs_shopt, option_value_t mode)
{
  enable_history_list = mode;
  if (mode)
    {
      bash_history_enable ();
      if (history_lines_this_session == 0)
	load_history ();
    }
  else
    {
      bash_history_disable ();
    }
  return 1 - enable_history_list;
}
#endif

static optset_status_t
set_o_option (char const *option_name, access_mode_t set_vs_shopt, option_value_t mode)
{
  struct option_def_s const *d = find_option (option_name);
  if (!d)
    {
      sh_invalidoptname (option_name);
      return (EX_USAGE);
    }

  if (d->letter == 0)
    {
      previous_option_value = get_option_value (d, AccessMode_Set);
      int status = set_option_value (d, AccessMode_Set, mode);
      return status;
    }
  else
    {
      if ((previous_option_value = change_flag (d->letter, bool_to_flag(mode))) == FLAG_ERROR)
	{
	  sh_invalidoptname (option_name);
	  return (EXECUTION_FAILURE);
	}
      else
	return (EXECUTION_SUCCESS);
    }
}

/*
 * set_minus_o_option() is called from parse_shell_options() in shell.c when
 * ‘-o’ is among the command line options for Bash itself
 */
int
set_minus_o_option (char on_or_off, char const *option_name)
{
  return set_o_option(option_name, AccessMode_Set, !flag_to_bool(on_or_off));	/* on_or_off == '+' */
}

static void
print_all_shell_variables (void)
{
  SHELL_VAR **vars;

  vars = all_shell_variables ();
  if (vars)
    {
      print_var_list (vars);
      free (vars);
    }

  /* POSIX.2 does not allow function names and definitions to be output when
     ‘set’ is invoked without options (PASC Interp #202). */
  if (posixly_correct == 0)
    {
      vars = all_shell_functions ();
      if (vars)
	{
	  print_func_list (vars);
	  free (vars);
	}
    }
}

void
set_shellopts (void)
{
  char tflag[N_O_OPTIONS] = {0};
  struct option_def_s const *d;
  size_t v_offset;
  SHELL_VAR *v;

  memset(&tflag, 0, sizeof tflag);
  for (d = o_options, v_offset = 0; d->name; d++)
    {
      if (d->hide_set_o && shell_compatibility_level < 54)
	continue;
      if (get_option_value (d, AccessMode_Set))
	{
	  v_offset += strlen (d->name) + 1;
	  tflag[d-o_options] = 1;
	}
    }

  char *value = (char *)xmalloc (v_offset + 1);

  for (d = o_options, v_offset = 0; d->name; d++)
    {
      if (tflag[d-o_options])
	{
	  strcpy (value + v_offset, d->name);
	  v_offset += strlen (d->name);
	  value[v_offset++] = ':';
	}
    }

  if (v_offset)
    v_offset--;			/* cut off trailing colon */
  value[v_offset] = '\0';

  /* ASS_FORCE so we don't have to temporarily turn off readonly;
   * ASS_NOMARK so we don't tickle `set -a`. */
  v = bind_variable ("SHELLOPTS", value, ASS_FORCE | ASS_NOMARK);

  /* Turn the read-only attribute back on. */
  VSETATTR (v, att_readonly);

  free (value);
}

void
parse_shellopts (char *value)
{
  char *vname;
  int vptr;

  vptr = 0;
  while (vname = extract_colon_unit (value, &vptr))
    {
      set_o_option (vname, true, true);
      free (vname);
    }
}

void
initialize_shell_options (int no_shellopts)
{
  char *temp;
  SHELL_VAR *var;

  if (no_shellopts == 0)
    {
      var = find_variable ("SHELLOPTS");
      /* set up any shell options we may have inherited. */
      if (var && imported_p (var))
	{
	  temp = (array_p (var) || assoc_p (var)) ? (char *)NULL : savestring (value_cell (var));
	  if (temp)
	    {
	      parse_shellopts (temp);
	      free (temp);
	    }
	}
    }

  /* Set up the $SHELLOPTS variable. */
  set_shellopts ();
}

/* Reset the values of the -o options that are not also shell flags.  This is
   called from execute_cmd.c:initialize_subshell() when setting up a subshell
   to run an executable shell script without a leading ‘#!’. */
void
reset_shell_options (void)
{
  pipefail_opt = 0;
  ignoreeof = 0;

  interactive_comments = 1;

#if defined (STRICT_POSIX)
  posixly_correct = 1;
#else
  posixly_correct = 0;
#endif
#if defined (HISTORY)
  dont_save_function_defs = 0;
  remember_on_history = enable_history_list = 1;	/* XXX */
#endif
}

/* Set some flags from the word values in the input list.  If LIST is empty,
   then print out the values of the variables instead.  If LIST contains
   non-flags, then set $1 - $9 to the successive words of LIST. */
int
set_builtin (WORD_LIST *list)
{
  int on_or_off, flag_name, force_assignment, opts_changed, rv, r;
  register char *arg;
  char s[3];

  if (list == 0)
    {
      print_all_shell_variables ();
      return (sh_chkwrite (EXECUTION_SUCCESS));
    }

  /* Check validity of flag arguments. */
  rv = EXECUTION_SUCCESS;
  reset_internal_getopt ();
  while ((flag_name = internal_getopt (list, optflags)) != -1)
    {
      switch (flag_name)
	{
	  case 'i':	/* don't allow set -i */
	    s[0] = list_opttype;
	    s[1] = 'i';
	    s[2] = '\0';
	    sh_invalidopt (s);
	    builtin_usage ();
	    return (EX_USAGE);
	  CASE_HELPOPT;
	  case '?':
	    builtin_usage ();
	    return (list_optopt == '?' ? EXECUTION_SUCCESS : EX_USAGE);
	  default:
	    break;
	}
    }

  /* Do the set command.  While the list consists of words starting with
     '-' or '+' treat them as flags, otherwise, start assigning them to
     $1 ... $n. */
  for (force_assignment = opts_changed = 0; list; )
    {
      arg = list->word->word;

      /* If the argument is ‘--’ or ‘-’ then signal the end of the list
	 and remember the remaining arguments. */
      if (arg[0] == '-' && (!arg[1] || (arg[1] == '-' && !arg[2])))
	{
	  list = list->next;

	  /* ‘set --’ unsets the positional parameters. */
	  if (arg[1] == '-')
	    force_assignment = 1;

	  /* Until told differently, the old shell behaviour of
	     ‘set - [arg ...]’ being equivalent to ‘set +xv [arg ...]’
	     stands.  Posix.2 says the behaviour is marked as obsolescent. */
	  else
	    {
	      change_flag ('x', FLAG_OFF);
	      change_flag ('v', FLAG_OFF);
	      opts_changed = 1;
	    }

	  break;
	}

      if ((on_or_off = *arg) && valid_flag(on_or_off))
	{
	  while (flag_name = *++arg)
	    {
	      if (flag_name == '?')
		{
		  builtin_usage ();
		  return (EXECUTION_SUCCESS);
		}
	      else if (flag_name == 'o') /* -+o option-name */
		{
		  char *option_name;
		  WORD_LIST *opt;

		  opt = list->next;

		  if (opt == 0)
		    {
		      list_minus_o_opts (-1, !flag_to_bool(on_or_off));
		      rv = sh_chkwrite (rv);
		      continue;
		    }

		  option_name = opt->word->word;

		  if (option_name == 0 || *option_name == '\0' ||
		      valid_flag(*option_name))
		    {
		      list_minus_o_opts (-1, !flag_to_bool(on_or_off));
		      continue;
		    }
		  list = list->next; /* Skip over option name. */

		  opts_changed = 1;
		  if ((r = set_o_option (option_name, true, on_or_off == FLAG_ON)) != EXECUTION_SUCCESS)
		    {
		      set_shellopts ();
		      return (r);
		    }
		}
	      else if (change_flag (flag_name, on_or_off) == FLAG_ERROR)
		{
		  s[0] = on_or_off;
		  s[1] = flag_name;
		  s[2] = '\0';
		  sh_invalidopt (s);
		  builtin_usage ();
		  set_shellopts ();
		  return (EXECUTION_FAILURE);
		}
	      opts_changed = 1;
	    }
	}
      else
	{
	  break;
	}
      list = list->next;
    }

  /* Assigning $1 ... $n */
  if (list || force_assignment)
    remember_args (list, 1);
  /* Set up new value of $SHELLOPTS */
  if (opts_changed)
    set_shellopts ();
  return (rv);
}

$BUILTIN unset
$FUNCTION unset_builtin
$SHORT_DOC unset [-f] [-v] [-n] [name ...]
Unset values and attributes of shell variables and functions.

For each NAME, remove the corresponding variable or function.

Options:
  -f	treat each NAME as a shell function
  -v	treat each NAME as a shell variable
  -n	treat each NAME as a name reference and unset the variable itself
		rather than the variable it references

Without options, unset first tries to unset a variable, and if that fails,
tries to unset a function.

Some variables cannot be unset; also see ‘readonly’.

Exit Status:
Returns success unless an invalid option is given or a NAME is read-only.
$END

#define NEXT_VARIABLE()	any_failed++; list = list->next; continue;

#define RESTORE_NAME() \
do { \
  tname = name + strlen (name); \
  if (tname == t - 1)	/* probably a paranoid check */ \
    { \
      tname[0] = '['; \
      t[strlen (t)] = ']'; \
    } \
} while (0)

int
unset_builtin (WORD_LIST *list)
{
  int unset_function, unset_variable, unset_array, opt, nameref, any_failed;
  int global_unset_func, global_unset_var, vflags, base_vflags, valid_id;
  int posix_utility_error;
  char *name, *tname;

  unset_function = unset_variable = unset_array = nameref = 0;
  posix_utility_error = any_failed = 0;
  global_unset_func = global_unset_var = 0;

  reset_internal_getopt ();
  while ((opt = internal_getopt (list, "fnv")) != -1)
    {
      switch (opt)
	{
	case 'f':
	  global_unset_func = 1;
	  break;
	case 'v':
	  global_unset_var = 1;
	  break;
	case 'n':
	  nameref = 1;
	  break;
	CASE_HELPOPT;
	default:
	  builtin_usage ();
	  return (EX_USAGE);
	}
    }

  list = loptend;

  if (global_unset_func && global_unset_var)
    {
      builtin_error (_("cannot simultaneously unset a function and a variable"));
      return (EXECUTION_FAILURE);
    }
  else if (unset_function && nameref)
    nameref = 0;

#if defined (ARRAY_VARS)
  base_vflags = array_expand_once ? VA_NOEXPAND : 0;
#endif

  while (list)
    {
      SHELL_VAR *var;
      int tem;
#if defined (ARRAY_VARS)
      char *t;
#endif

      name = list->word->word;

      unset_function = global_unset_func;
      unset_variable = global_unset_var;

#if defined (ARRAY_VARS)
      vflags = builtin_arrayref_flags (list->word, base_vflags);
      unset_array = 0;
      /* XXX valid array reference second arg was 0 */
      /* XXX tokenize_array_reference modifies NAME if it succeeds */
      if (unset_function == 0 && nameref == 0 && tokenize_array_reference (name, vflags, &t))
	unset_array = 1;
#endif

      /* Get error checking out of the way first.  The low-level functions
	 just perform the unset, relying on the caller to verify. */
      valid_id = valid_identifier (name);

      /* Whether or not we are in posix mode, if neither -f nor -v appears,
	 skip over trying to unset variables with invalid names and just
	 treat them as potential shell function names. */
      if (global_unset_func == 0 && global_unset_var == 0 && valid_id == 0)
	{
#if defined (ARRAY_VARS)
	  if (unset_array)
	    RESTORE_NAME ();
#endif
	  unset_variable = unset_array = 0;
	  unset_function = 1;
	}

      /* Bash allows functions with names which are not valid identifiers
	 to be created when not in posix mode, so check only when in posix
	 mode when unsetting a function. */
      if (unset_function == 0 && valid_id == 0)
	{
	  sh_invalidid (name);
	  posix_utility_error++;
	  NEXT_VARIABLE ();
	}

      /* Search for functions here if -f supplied or if NAME cannot be a
	 variable name. */
      var = unset_function ? find_function (name)
			   : (nameref ? find_variable_last_nameref (name, 0) : find_variable (name));

      /* Some variables (but not functions yet) cannot be unset, period. */
      if (var && unset_function == 0 && non_unsettable_p (var))
	{
	  builtin_error (_("%s: cannot unset"), name);
	  posix_utility_error++;
	  NEXT_VARIABLE ();
	}

      /* if we have a nameref we want to use it */
      if (var && unset_function == 0 && nameref == 0 && STREQ (name, name_cell(var)) == 0)
	name = name_cell (var);

      /* Posix.2 says try variables first, then functions.  If we would
	 find a function after unsuccessfully searching for a variable,
	 note that we're acting on a function now as if -f were
	 supplied.  The readonly check below takes care of it. */
      if (var == 0 && nameref == 0 && unset_variable == 0 && unset_function == 0)
	{
#if defined (ARRAY_VARS)
	  /* We modified NAME in the call to tokenize_array_reference, so we
	     need to restore it here. We turned the original ‘[’ and ‘]’ into
	     NULL, to isolate the array name and subscript. This only happens
	     if tokenize_array_reference succeeds with a non-NULL subscript
	     pointer, and UNSET_ARRAY is set to 1 only in this case. */
	  if (unset_array)
	    {
	      RESTORE_NAME();
	      unset_array = 0;
	    }
#endif
	  if (var = find_function (name))
	    unset_function = 1;
	}

      /* Posix.2 says that unsetting readonly variables is an error. */
      if (var && readonly_p (var))
	{
	  builtin_error (_("%s: cannot unset: readonly %s"),
			 var->name, unset_function ? "function" : "variable");
	  posix_utility_error++;
	  NEXT_VARIABLE ();
	}

      /* Unless the -f option is supplied, the name refers to a variable. */
#if defined (ARRAY_VARS)
      if (var && unset_array)
	{
	  if (shell_compatibility_level <= 51)
	    vflags |= VA_ALLOWALL;

	  /* Let unbind_array_element decide what to do with non-array vars */
	  tem = unbind_array_element (var, t, vflags);	/* XXX new third arg */
	  if (tem == -2 && array_p (var) == 0 && assoc_p (var) == 0)
	    {
	      builtin_error (_("%s: not an array variable"), var->name);
	      NEXT_VARIABLE ();
	    }
	  else if (tem < 0)
	    any_failed++;
	}
      else
#endif /* ARRAY_VARS */
      /* If we're trying to unset a nameref variable whose value isn't a set
	 variable, make sure we still try to unset the nameref's value */
      if (var == 0 && nameref == 0 && unset_function == 0)
	{
	  var = find_variable_last_nameref (name, 0);
	  if (var && nameref_p (var))
	    {
#if defined (ARRAY_VARS)
	      if (valid_array_reference (nameref_cell (var), 0))
		{
		  int len;

		  tname = savestring (nameref_cell (var));
		  tem = 0;
		  if (var = array_variable_part (tname, 0, &t, &len))
		    {
		      /* change to what unbind_array_element now expects */
		      if (t[len - 1] == ']')
			t[len - 1] = 0;
		      tem = unbind_array_element (var, t, vflags);	/* XXX new third arg */
		    }
		  free (tname);
		}
	      else
#endif
		tem = unbind_variable (nameref_cell (var));
	    }
	  else if (posixly_correct && var && tempvar_p (var))
	    tem = posix_unbind_tempvar (name);
	  else
	    tem = unbind_variable (name);
	}
      else if (posixly_correct && unset_function == 0 && nameref == 0 && var && tempvar_p (var))
	tem = posix_unbind_tempvar (name);
      else
	tem = unset_function ? unbind_func (name) : (nameref ? unbind_nameref (name) : unbind_variable (name));

      /* This is what Posix.2 says:  “If neither -f nor -v
	 is specified, the name refers to a variable; if a variable by
	 that name does not exist, it is unspecified whether  a function
	 by that name, if any, shall be unset.” The unspecified part is a
	 recent addition, so we continue to try to unset a shell function if
	 we don't find a variable named NAME. */
      if (tem == -1 && nameref == 0 && unset_function == 0 && unset_variable == 0)
	tem = unbind_func (name);

      name = list->word->word;		/* reset above for namerefs */

      /* SUSv3, POSIX.1-2001 say:  “Unsetting a variable or function that
	 was not previously set shall not be considered an error.” */

      if (unset_function == 0)
	stupidly_hack_special_variables (name);

      list = list->next;
    }

  return (any_failed ? (posix_utility_error ? EX_UTILERROR : EXECUTION_FAILURE) : EXECUTION_SUCCESS);
}

$BUILTIN shopt
$FUNCTION shopt_builtin
$SHORT_DOC shopt [-pqsu] [-o] [optname ...]
Set and unset shell options.

Change the setting of each shell option OPTNAME.  Without any option
arguments, list each supplied OPTNAME, or all shell options if no
OPTNAMEs are given, with an indication of whether or not each is set.

Options:
  -o	restrict OPTNAMEs to those defined for use with ‘set -o’
  -p	print each shell option with an indication of its status
  -q	suppress output
  -s	enable (set) each OPTNAME
  -u	disable (unset) each OPTNAME

Exit Status:
Returns success if OPTNAME is enabled; fails if an invalid option is
given or OPTNAME is disabled.
$END

#define find_option find_shopt

#define UNSETOPT	0
#define SETOPT		1

#define OPTFMT		"%-15s\t%s\n"

extern int allow_null_glob_expansion, fail_glob_expansion, glob_dot_filenames;
extern int cdable_vars, mail_warning, source_uses_path;
extern int no_exit_on_failed_exec, print_shift_error;
extern int check_hashed_filenames, promptvars;
extern int cdspelling, expand_aliases;
extern int extended_quote;
extern int check_window_size;
extern int glob_ignore_case, match_ignore_case;
extern int hup_on_exit;
extern int xpg_echo;
extern int gnu_error_format;
extern int check_jobs_at_exit;
extern int autocd;
extern int glob_star;
extern int glob_asciirange;
extern int glob_always_skip_dot_and_dotdot;
extern int lastpipe_opt;
extern int inherit_errexit;
extern int localvar_inherit;
extern int localvar_unset;
extern int varassign_redir_autoclose;
extern int singlequote_translations;
extern int patsub_replacement;
extern int bash_source_fullpath;

#if defined (EXTENDED_GLOB)
extern int extended_glob;
#endif

#if defined (READLINE)
extern int complete_fullquote;
extern int dircomplete_expand;
extern int dircomplete_spelling;
extern int force_fignore;
extern int hist_verify;
extern int history_reediting;
extern int no_empty_command_completion;
extern int perform_hostname_completion;

extern int enable_hostname_completion (int);
#endif

#if defined (PROGRAMMABLE_COMPLETION)
extern int prog_completion_enabled;
extern int progcomp_alias;
#endif

#if defined (DEBUGGER)
extern int debugging_mode;
#endif

#if defined (ARRAY_VARS)
extern int array_expand_once;
#endif

#if defined (SYSLOG_HISTORY)
extern int syslog_history;
#endif

static opt_set_func_t change_then_set_shellopts;
static opt_get_func_t get_compatibility_level;
static opt_set_func_t set_compatibility_level;

#if defined (RESTRICTED_SHELL)
static opt_set_func_t set_restricted_shell;
#endif

#if defined (READLINE)
static opt_set_func_t shopt_enable_hostname_completion;
static opt_set_func_t shopt_set_complete_direxpand;
#endif

#if defined (EXTENDED_GLOB)
int extglob_flag = EXTGLOB_DEFAULT;
static opt_set_func_t shopt_set_extglob;
#endif

int expaliases_flag = 0;
static opt_set_func_t shopt_set_expaliases;

#if defined (DEBUGGER)
static opt_set_func_t shopt_set_debug_mode;
#endif

/* If you add a new variable name here, make sure to set the default value
   appropriately in reset_shopt_options. */

static struct option_def_s shopt_vars[] = {
#if defined (ARRAY_VARS)
  { "array_expand_once",	.store = &array_expand_once,							.hide_set_o = 1 },
  { "assoc_expand_once",	.store = &array_expand_once,							.hide_set_o = 1,	.hide_shopt = 1 },	/* deprecated */
#endif
  { "autocd",			.store = &autocd,								.hide_set_o = 1 },
#if defined (ARRAY_VARS)
  { "bash_source_fullpath",	.store = &bash_source_fullpath,							.hide_set_o = 1 },
#endif
  { "cdable_vars",		.store = &cdable_vars,								.hide_set_o = 1 },
  { "cdspell",			.store = &cdspelling,								.hide_set_o = 1 },
  { "checkhash",		.store = &check_hashed_filenames,						.hide_set_o = 1 },
#if defined (JOB_CONTROL)
  { "checkjobs",		.store = &check_jobs_at_exit,							.hide_set_o = 1 },
#endif
  { "checkwinsize",		.store = &check_window_size,							.hide_set_o = 1 },
#if defined (HISTORY)
  { "cmdhist",			.store = &command_oriented_history,						.hide_set_o = 1 },
#endif
  { "compat31",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 31 },
  { "compat32",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 32 },
  { "compat40",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 40 },
  { "compat41",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 41 },
  { "compat42",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 42 },
  { "compat43",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 43 },
  { "compat44",			.store = &shell_compatibility_level,	.get_func = get_compatibility_level,	.set_func = set_compatibility_level,	.hide_set_o = 1,	.reference_value = 44 },
#if defined (READLINE)
  { "complete_fullquote",	.store = &complete_fullquote},
  { "direxpand",		.store = &dircomplete_expand,		.set_func = shopt_set_complete_direxpand,	.hide_set_o = 1 },
  { "dirspell",			.store = &dircomplete_spelling,							.hide_set_o = 1 },
#endif
  { "dotglob",			.store = &glob_dot_filenames,							.hide_set_o = 1 },
  { "execfail",			.store = &no_exit_on_failed_exec,						.hide_set_o = 1 },
  { "expand_aliases",		.store = &expaliases_flag,		.set_func = shopt_set_expaliases,	.hide_set_o = 1 },
#if defined (DEBUGGER)
  { "extdebug",			.store = &debugging_mode,		.set_func = shopt_set_debug_mode,	.hide_set_o = 1 },
#endif
#if defined (EXTENDED_GLOB)
  { "extglob",			.store = &extglob_flag,			.set_func = shopt_set_extglob,		.hide_set_o = 1 },
#endif
  { "extquote",			.store = &extended_quote,							.hide_set_o = 1 },
  { "failglob",			.store = &fail_glob_expansion,							.hide_set_o = 1 },
#if defined (READLINE)
  { "force_fignore",		.store = &force_fignore,							.hide_set_o = 1 },
#endif
  { "globasciiranges",		.store = &glob_asciirange,							.hide_set_o = 1 },
  { "globskipdots",		.store = &glob_always_skip_dot_and_dotdot,					.hide_set_o = 1 },
  { "globstar",			.store = &glob_star,								.hide_set_o = 1 },
  { "gnu_errfmt",		.store = &gnu_error_format,							.hide_set_o = 1 },
#if defined (HISTORY)
  { "histappend",		.store = &force_append_history,							.hide_set_o = 1 },
#endif
#if defined (READLINE)
  { "histreedit",		.store = &history_reediting,							.hide_set_o = 1 },
  { "histverify",		.store = &hist_verify,								.hide_set_o = 1 },
  { "hostcomplete",		.store = &perform_hostname_completion,	.set_func = shopt_enable_hostname_completion,	.hide_set_o = 1 },
#endif
  { "huponexit",		.store = &hup_on_exit,								.hide_set_o = 1 },
  { "inherit_errexit",		.store = &inherit_errexit,							.hide_set_o = 1 },
  { "interactive_comments",	.store = &interactive_comments,		.set_func = change_then_set_shellopts,	.hide_set_o = 1 },
  { "lastpipe",			.store = &lastpipe_opt,								.hide_set_o = 1 },
#if defined (HISTORY)
  { "lithist",			.store = &literal_history,							.hide_set_o = 1 },
#endif
  { "localvar_inherit",		.store = &localvar_inherit,							.hide_set_o = 1 },
  { "localvar_unset",		.store = &localvar_unset,							.hide_set_o = 1 },
  { "login_shell",		.store = &login_shell,					.forbid_change = 1,	.hide_set_o = 1 },
  { "mailwarn",			.store = &mail_warning,								.hide_set_o = 1 },
#if defined (READLINE)
  { "no_empty_cmd_completion",	.store = &no_empty_command_completion,						.hide_set_o = 1 },
#endif
  { "nocaseglob",		.store = &glob_ignore_case,							.hide_set_o = 1 },
  { "nocasematch",		.store = &match_ignore_case,							.hide_set_o = 1 },
  { "noexpand_translation",	.store = &singlequote_translations,						.hide_set_o = 1 },
  { "nullglob",			.store = &allow_null_glob_expansion,						.hide_set_o = 1 },
  { "patsub_replacement",	.store = &patsub_replacement,							.hide_set_o = 1 },
#if defined (PROGRAMMABLE_COMPLETION)
  { "progcomp",			.store = &prog_completion_enabled,						.hide_set_o = 1 },
#  if defined (ALIAS)
  { "progcomp_alias",		.store = &progcomp_alias,							.hide_set_o = 1 },
#  endif
#endif
  { "promptvars",		.store = &promptvars,								.hide_set_o = 1 },
#if defined (RESTRICTED_SHELL)
  { "restricted_shell",		.store = &restricted_shell,		.set_func = set_restricted_shell,	.hide_set_o = 1 },
#endif
  { "shift_verbose",		.store = &print_shift_error,							.hide_set_o = 1 },
  { "sourcepath",		.store = &source_uses_path,							.hide_set_o = 1 },
#if defined (SYSLOG_HISTORY) && defined (SYSLOG_SHOPT)
  { "syslog_history",		.store = &syslog_history,							.hide_set_o = 1 },
#endif
  { "varredir_close",		.store = &varassign_redir_autoclose,						.hide_set_o = 1 },
  { "xpg_echo",			.store = &xpg_echo,								.hide_set_o = 1 },
  {0}
};

#define N_SHOPT_OPTIONS		(sizeof (shopt_vars) / sizeof (shopt_vars[0]))

static int change_shopts (WORD_LIST *, int, int);
static int list_shopts (WORD_LIST *, int);
static int list_some_shopts (int, int);
static int list_shopt_o_options (WORD_LIST *, int);
static int list_some_o_options (int, int);
static int set_shopt_o_options (int, WORD_LIST *, int);

#define SFLAG	0x01
#define UFLAG	0x02
#define QFLAG	0x04
#define OFLAG	0x08
#define PFLAG	0x10

int
shopt_builtin (WORD_LIST *list)
{
  int opt, flags, rval;

  flags = 0;
  reset_internal_getopt ();
  while ((opt = internal_getopt (list, "psuoq")) != -1)
    {
      switch (opt)
	{
	case 's':
	  flags |= SFLAG;
	  break;
	case 'u':
	  flags |= UFLAG;
	  break;
	case 'q':
	  flags |= QFLAG;
	  break;
	case 'o':
	  flags |= OFLAG;
	  break;
	case 'p':
	  flags |= PFLAG;
	  break;
	CASE_HELPOPT;
	default:
	  builtin_usage ();
	  return (EX_USAGE);
	}
    }
  list = loptend;

  if ((flags & (SFLAG|UFLAG)) == (SFLAG|UFLAG))
    {
      builtin_error (_("cannot set and unset shell options simultaneously"));
      return (EXECUTION_FAILURE);
    }

  rval = EXECUTION_SUCCESS;
  if ((flags & OFLAG) && ((flags & (SFLAG|UFLAG)) == 0))	/* shopt -o */
    rval = list_shopt_o_options (list, flags);
  else if (list && (flags & OFLAG))		/* shopt -so args */
    rval = set_shopt_o_options ((flags & SFLAG) ? FLAG_ON : FLAG_OFF, list, flags & QFLAG);
  else if (flags & OFLAG)	/* shopt -so */
    rval = list_some_o_options ((flags & SFLAG) ? 1 : 0, flags);
  else if (list && (flags & (SFLAG|UFLAG)))	/* shopt -su args */
    rval = change_shopts (list, (flags & SFLAG) ? SETOPT : UNSETOPT, flags & QFLAG);
  else if ((flags & (SFLAG|UFLAG)) == 0)	/* shopt [args] */
    rval = list_shopts (list, flags);
  else						/* shopt -su */
    rval = list_some_shopts ((flags & SFLAG) ? SETOPT : UNSETOPT, flags);
  return (rval);
}

/* Reset the options managed by ‘shopt’ to the values they would have at
   shell startup.  Variables from shopt_vars. */
void
reset_shopt_options (void)
{
  autocd = cdable_vars = cdspelling = 0;
  check_hashed_filenames = CHECKHASH_DEFAULT;
  check_window_size = CHECKWINSIZE_DEFAULT;
  allow_null_glob_expansion = glob_dot_filenames = 0;
  no_exit_on_failed_exec = 0;
  expand_aliases = expaliases_flag = 0;
  extended_quote = 1;
  fail_glob_expansion = 0;
  glob_asciirange = GLOBASCII_DEFAULT;
  glob_star = 0;
  gnu_error_format = 0;
  hup_on_exit = 0;
  inherit_errexit = 0;
  interactive_comments = 1;
  lastpipe_opt = 0;
  localvar_inherit = localvar_unset = 0;
  mail_warning = 0;
  glob_ignore_case = match_ignore_case = 0;
  print_shift_error = 0;
  source_uses_path = promptvars = 1;
  varassign_redir_autoclose = 0;
  singlequote_translations = 0;
  patsub_replacement = PATSUB_REPLACE_DEFAULT;

#if defined (JOB_CONTROL)
  check_jobs_at_exit = 0;
#endif

#if defined (EXTENDED_GLOB)
  extended_glob = extglob_flag = EXTGLOB_DEFAULT;
#endif
  glob_always_skip_dot_and_dotdot = 1;		/* new default as of bash-5.2 */

#if defined (ARRAY_VARS)
  array_expand_once = 0;
#endif

#if defined (HISTORY)
  literal_history = 0;
  force_append_history = 0;
  command_oriented_history = 1;
#endif

#if defined (SYSLOG_HISTORY)
#  if defined (SYSLOG_SHOPT)
  syslog_history = SYSLOG_SHOPT;
#  else
  syslog_history = 1;
#  endif /* SYSLOG_SHOPT */
#endif

#if defined (READLINE)
  complete_fullquote = 1;
  force_fignore = 1;
  hist_verify = history_reediting = 0;
  perform_hostname_completion = 1;
#  if DIRCOMPLETE_EXPAND_DEFAULT
  dircomplete_expand = 1;
#  else
  dircomplete_expand = 0;
#endif
  dircomplete_spelling = 0;
  no_empty_command_completion = 0;
#endif

#if defined (PROGRAMMABLE_COMPLETION)
  prog_completion_enabled = 1;
#  if defined (ALIAS)
  progcomp_alias = 0;
#  endif
#endif

#if defined (DEFAULT_ECHO_TO_XPG) || defined (STRICT_POSIX)
  xpg_echo = 1;
#else
  xpg_echo = 0;
#endif /* DEFAULT_ECHO_TO_XPG */

#if defined (DEBUGGER)
  debugging_mode = 0;
#endif
}

/* This is actually find_shopt, due to the #define above */
static struct option_def_s const *
find_option (char const *name)
{
  struct option_def_s const *d;

  for (d = shopt_vars; d->name; d++)
    if (STREQ (name, d->name))
      return d;
  return NULL;
}

static void
shopt_error (char const *s)
{
  builtin_error (_("%s: invalid shell option name"), s);
}

static int
change_shopts (WORD_LIST *list, int mode, int quiet)
{
  WORD_LIST *l;
  int rval = EXECUTION_SUCCESS;
  SHELL_VAR *v;

  for (l = list; l; l = l->next)
    {
      struct option_def_s const *d = find_option (l->word->word);
      if (!d)
	{
	  shopt_error (l->word->word);
	  rval = EXECUTION_FAILURE;
	}
      if (d->set_func)
	{
	    d->set_func (d, AccessMode_Shopt, mode);
	}
      else if (d->store && !d->readonly)
	*d->store = mode;
    }

  set_bashopts (true);
  return (rval);
}

static void
print_shopt (char *name, int val, int flags)
{
  if (flags & PFLAG)
    printf ("shopt %s %s\n", val ? "-s" : "-u", name);
  else
    printf (OPTFMT, name, val ? on : off);
}

/* List the values of all or any of the ‘shopt’ options.  Returns 0 if
   all were listed or all variables queried were on; 1 otherwise. */
static int
list_shopts (WORD_LIST *list, int flags)
{
  WORD_LIST *l;
  int val, rval = EXECUTION_SUCCESS;

  if (list == 0)
    {
      struct option_def_s const *d;
      for (d = shopt_vars; d->name; d++)
	{
	  val = *d->store;
	  if ((flags & QFLAG) == 0)
	    print_shopt (d->name, val, flags);
	}
      return (sh_chkwrite (EXECUTION_SUCCESS));
    }

  for (l = list; l; l = l->next)
    {
      struct option_def_s const *d = find_option (l->word->word);
      if (!d)
	{
	  shopt_error (l->word->word);
	  rval = EXECUTION_FAILURE;
	  continue;
	}
      val = get_option_value(d, AccessMode_Shopt);
      if (val == 0)
	rval = 1; /* looks like EXECUTION_FAILURE but means false, not failure */
      if ((flags & QFLAG) == 0)
	print_shopt (l->word->word, val, flags);
    }

  return (sh_chkwrite (rval));
}

static int
list_some_shopts (int mode, int flags)
{
  int val, i;
  struct option_def_s const *d;

  for (d = shopt_vars; d->name; d++)
    {
      val = *d->store;
      if (((flags & QFLAG) == 0) && mode == val)
	print_shopt (d->name, val, flags);
    }
  return (sh_chkwrite (EXECUTION_SUCCESS));
}

static int
list_shopt_o_options (WORD_LIST *list, int flags)
{
  WORD_LIST *l;
  int val, rval;

  if (list == 0)
    {
      if ((flags & QFLAG) == 0)
	list_minus_o_opts (-1, (flags & PFLAG));
      return (sh_chkwrite (EXECUTION_SUCCESS));
    }

  for (l = list, rval = EXECUTION_SUCCESS; l; l = l->next)
    {
      val = minus_o_option_value (l->word->word);
      if (val == -1)
	{
	  sh_invalidoptname (l->word->word);
	  rval = EXECUTION_FAILURE;
	  continue;
	}
      if (val == 0)
	rval = EXECUTION_FAILURE;
      if ((flags & QFLAG) == 0)
	{
	  if (flags & PFLAG)
	    printf ("set %co %s\n", bool_to_flag(val), l->word->word);
	  else
	    printf (OPTFMT, l->word->word, val ? on : off);
	}
    }
  return (sh_chkwrite (rval));
}

static int
list_some_o_options (int mode, int flags)
{
  if ((flags & QFLAG) == 0)
    list_minus_o_opts (mode, (flags & PFLAG));
  return (sh_chkwrite (EXECUTION_SUCCESS));
}

static int
set_shopt_o_options (int mode, WORD_LIST *list, int quiet)
{
  WORD_LIST *l;
  int rval = EXECUTION_SUCCESS;

  for (l = list; l; l = l->next)
    {
      if (set_o_option (l->word->word, false, mode) == EXECUTION_FAILURE)
	rval = EXECUTION_FAILURE;
    }
  set_shellopts ();
  return rval;
}

/* If we set or unset interactive_comments with shopt, make sure the
   change is reflected in $SHELLOPTS. */
static optset_status_t
change_then_set_shellopts (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  *d->store = mode;
  set_shellopts ();
  return (0);
}

#if defined (DEBUGGER)
static optset_status_t
shopt_set_debug_mode (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  error_trace_mode = function_trace_mode = debugging_mode = mode;
  set_shellopts ();
  if (debugging_mode)
    init_bash_argv ();
  return (0);
}
#endif

static optset_status_t
shopt_set_expaliases (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  *d->store = mode;
  expand_aliases = expaliases_flag;
  return 0;
}

#if defined (EXTENDED_GLOB)
static optset_status_t
shopt_set_extglob (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  *d->store = mode;
  extended_glob = extglob_flag;
  return 0;
}
#endif

#if defined (READLINE)
static optset_status_t
shopt_enable_hostname_completion (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  *d->store = mode;
  return (enable_hostname_completion (mode));
}
#endif

static option_value_t
get_compatibility_level (struct option_def_s const *d, access_mode_t set_vs_shopt)
{
  return *d->store == d->reference_value;
}

static optset_status_t
set_compatibility_level (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  /* If we're setting level N, just set shell_compatibility_level to N.
   * If we're unsetting level N:
   *  - do nothing if it doesn't match the current shell_compatibility_level
   *  - set shell_compatibility_level to the default, but only if it's already below 45 or
   *    above the default level
   */
  if (mode)
    *d->store = d->reference_value;
  else if ( *d->store == d->reference_value && ( *d->store <= 44 || *d->store > DEFAULT_COMPAT_LEVEL ))
    *d->store = DEFAULT_COMPAT_LEVEL;

  /* Make sure the current compatibility level is reflected in BASH_COMPAT */
  char *rhs = itos (shell_compatibility_level);
  bind_variable ("BASH_COMPAT", rhs, 0);
  free (rhs);

  return 0;
}

/* set_compatibility_opts currently does nothing */
void
set_compatibility_opts (void)
{
}

#if defined (READLINE)
static optset_status_t
shopt_set_complete_direxpand (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  set_directory_hook ();
  return 0;
}
#endif

#if defined (RESTRICTED_SHELL)
/* Don't allow the value of restricted_shell to be modified. */

static optset_status_t
set_restricted_shell (struct option_def_s const *d, access_mode_t set_vs_shopt, option_value_t mode)
{
  static int save_restricted = -1;

  if (save_restricted == -1)
    save_restricted = shell_is_restricted (shell_name);

  restricted_shell = save_restricted;
  return (0);
}
#endif /* RESTRICTED_SHELL */

char **
get_shopt_options (void)
{
  char **ret;
  int i;
  size_t n;

  n = sizeof (shopt_vars) / sizeof (shopt_vars[0]);
  ret = strvec_create (n + 1);
  for (i = 0; shopt_vars[i].name; i++)
    ret[i] = savestring (shopt_vars[i].name);
  ret[i] = (char *)NULL;
  return ret;
}

/*
 * External interface for other parts of the shell.  NAME is a string option;
 * MODE is 0 if we want to unset an option; 1 if we want to set an option.
 * REUSABLE is 1 if we want to print output in a form that may be reused.
 */
int
shopt_setopt (char *name, int mode)
{
  WORD_LIST *wl;
  int r;

  wl = add_string_to_list (name, (WORD_LIST *)NULL);
  r = change_shopts (wl, mode, 0);
  dispose_words (wl);
  return r;
}

int
shopt_listopt (char *name, int reusable)
{
  if (name == 0)
    return (list_shopts ((WORD_LIST *)NULL, reusable ? PFLAG : 0));

  struct option_def_s const *d = find_option (name);
  if (!d)
    {
      shopt_error (name);
      return (EXECUTION_FAILURE);
    }

  print_shopt (name, *d->store, reusable ? PFLAG : 0);
  return (sh_chkwrite (EXECUTION_SUCCESS));
}

void
set_bashopts (_Bool softly)
{
  char *value, *vend;
  char tflag[N_SHOPT_OPTIONS];
  size_t vsize = 0;
  struct option_def_s const *d;
  SHELL_VAR *v;

  v = find_variable ("BASHOPTS");

  /* Don't set $BASHOPTS here if it hasn't already been initialized */
  if (v == NULL && softly)
    return;

  memset(&tflag, 0, sizeof tflag);
  for (d = shopt_vars; d->name; d++)
    {
      if (d->hide_shopt && shell_compatibility_level < 54)
	continue;
      if (get_option_value (d, AccessMode_Shopt))
	{
	  vsize += strlen (d->name) + 1;
	  tflag[d - shopt_vars] = 1;
	}
    }

  value = vend = xmalloc (vsize + 1);

  for (d = shopt_vars; d->name; d++)
    {
      if (tflag[d - shopt_vars])
	{
#ifdef HAVE_STPCPY
	  vend = stpcpy (vend, d->name);
#else
	  strcpy (vend, d->name);
	  vend += strlen (vend);
#endif
	  *vend++ = ':';
	}
    }

  if (vend > value)
    vend--;			/* cut off trailing colon */
  *vend = '\0';

  /* ASS_FORCE so we don't have to temporarily turn off readonly;
   * ASS_NOMARK so we don't tickle `set -a`. */
  v = bind_variable ("BASHOPTS", value, ASS_FORCE | ASS_NOMARK);

  /* Turn the read-only attribute back on. */
  VSETATTR (v, att_readonly);

  free (value);
}

void
parse_bashopts (char *value)
{
  char *vname;
  int vptr = 0;
  while (vname = extract_colon_unit (value, &vptr))
    {
      struct option_def_s const *d = find_option (vname);
      /* Ignore return value; we don't care if it fails */
      (void) set_option_value(d, AccessMode_Shopt, true);
      free (vname);
    }
}

void
initialize_bashopts (int no_bashopts)
{
  char *temp;
  SHELL_VAR *var;

  if (no_bashopts == 0)
    {
      var = find_variable ("BASHOPTS");
      /* set up any shell options we may have inherited. */
      if (var && imported_p (var))
	{
	  temp = (array_p (var) || assoc_p (var)) ? (char *)NULL : savestring (value_cell (var));
	  if (temp)
	    {
	      parse_bashopts (temp);
	      free (temp);
	    }
	}
    }

  /* Set up the $BASHOPTS variable. */
  set_bashopts (false);
}
